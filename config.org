
* Documentation
** How to handle code blocks in Org Mode
   - insert code block by typing < s tab
   - edit code in new buffer by typing C-c '
   - execute code block by typing C-c C-c
* Navigation
** Launcher for applications
   #+BEGIN_SRC emacs-lisp
   (use-package dmenu
     :ensure t
     :bind
     ("C-M-d" . dmenu))
   #+End_Src
** switch-window
   #+BEGIN_SRC emacs-lisp
   (use-package switch-window
     :ensure
     :config
     (setq switch-window-input-style 'minibuffer)
     (setq switch-window-increase 4)
     (setq switch-window-threshold 3)
     (setq switch-window-shortcut-style 'qwerty)
     (setq switch-window-qwerty-shortcuts
	   '("a" "s" "d" "f" "j" "k" "j"))
     :bind
     ([remap other-window] . switch-window))
   #+END_SRC

** window splitting functions
   #+BEGIN_SRC emacs-lisp
   (defun split-and-follow-horizontally ()
     (interactive)
     (split-window-below)
     (balance-windows)
     (other-window 1))
   (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

   (defun split-and-follow-vertically ()
     (interactive)
     (split-window-right)
     (balance-windows)
     (other-window 1))
   (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
   #+END_SRC
** balance windows
   #+BEGIN_SRC emacs-lisp
   (defun delete-and-balance-windows ()
     (interactive)
     (delete-window)
     (balance-windows))
   (global-set-key (kbd "C-x 0") 'delete-and-balance-windows)
   #+END_SRC
** buffers
*** always kill current buffer
    #+BEGIN_SRC emacs-lisp
   (defun kill-curr-buffer ()
     (interactive)
     (kill-buffer (current-buffer)))
   (global-set-key (kbd "C-x k") 'kill-current-buffer)
    #+END_SRC
*** enable ibuffer
    #+BEGIN_SRC emacs-lisp
 (global-set-key (kbd "C-x C-b") 'ibuffer)
    #+END_SRC

*** kill all buffers
    #+BEGIN_SRC emacs-lisp
   (defun kill-all-buffers ()
     (interactive)
     (mapc 'kill-buffer (buffer-list)))
    #+END_SRC
*** kill terminal buffer without confirmation
    #+BEGIN_SRC emacs-lisp
   (defun set-no-process-query-on-exit ()
     (let ((proc (get-buffer-process (current-buffer))))
       (when (processp proc)
	 (set-process-query-on-exit-flag proc nil))))
   (add-hook 'term-exec-hook 'set-no-process-query-on-exit)
    #+END_SRC
* Settings
** sudo edit
   #+BEGIN_SRC emacs-lisp
   (use-package sudo-edit
     :ensure t
     :bind ("M-C-e" . 'sudo-edit)
)
   #+END_SRC
** convenient functions
*** kill word
    #+BEGIN_SRC emacs-lisp
   (defun kill-whole-word ()
     (interactive)
     (backward-word)
     (kill-word 1))
   (global-set-key (kbd "C-c k w") 'kill-whole-word)
    #+END_SRC
*** copy-whole-line
    #+BEGIN_SRC emacs-lisp
   (defun copy-whole-line ()
     (interactive)
     (save-excursion
       (kill-new
	(buffer-substring
	 (point-at-bol)
	 (point-at-eol)))))
   (global-set-key (kbd "C-c w l") 'copy-whole-line)
    #+END_SRC
** modline
   #+BEGIN_SRC emacs-lisp
   (use-package diminish
     :ensure t
     :init
     (diminish 'eldoc-mode)
     (diminish 'which-key-mode)
     (diminish 'org-src-mode)
     (diminish 'company-mode)
     (diminish 'rainbow-mode))
   #+END_SRC
** Minor stuff
   #+BEGIN_SRC emacs-lisp
 ;;promt to suggest possible macros:
 (use-package which-key
   :ensure t
   :init
   (which-key-mode))
   #+END_SRC



   #+BEGIN_SRC emacs-lisp
 (setq inhibit-startup-message t)
   #+END_SRC



   #+BEGIN_SRC emacs-lisp
 (defalias 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
 (global-set-key (kbd "<M-return>") 'ansi-term)
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
 (setq scroll-conservatively 100)
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
 (when window-system (global-hl-line-mode t))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
 ;;whatever this does??:
 (when window-system (global-prettify-symbols-mode t))
   #+END_SRC

** Keybindings
*** Dired
    #+BEGIN_SRC emacs-lisp
    (local-set-key (kbd "M-C-u") 'dired-up-directory)
    #+END_SRC

*** Jump to beginning or end of buffer 
    #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "M-n") 'end-of-buffer)
   (global-set-key (kbd "M-p") 'beginning-of-buffer)
    #+END_SRC
*** Enlarge or shrink window
   #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "M-C-<right>") 'shrink-window-horizontally)
    (global-set-key (kbd "M-C-<left>") 'enlarge-window-horizontally)
    (global-set-key (kbd "M-C-<down>") 'shrink-window)
    (global-set-key (kbd "M-C-<up>") 'enlarge-window)
   #+END_SRC
*** Reload init file
   #+BEGIN_SRC emacs-lisp
   (defun reload-init-file ()
     (interactive)
     (load-file user-init-file))

   (global-set-key (kbd "C-x C-e") 'reload-init-file)
   #+END_SRC
** Minor settings
*** line number mode
#+BEGIN_SRC emacs-lisp
(display-line-numbers-mode)
#+END_SRC
*** line-break with
    #+BEGIN_SRC emacs-lisp
    (setq-default fill-column 70)
    #+END_SRC
*** subword
    #+BEGIN_SRC emacs-lisp
  ;; (global-subword-mode 1)
    #+END_SRC
*** electric
    #+BEGIN_SRC emacs-lisp
   (setq electric-pair-pairs '(
			       (?\( . ?\))
			       (?\{ . ?\})
			       ))
   (electric-pair-mode )
    #+END_SRC
*** show line number and column number
    #+BEGIN_SRC emacs-lisp
 (line-number-mode 1)
 (column-number-mode 1)
    #+END_SRC
** Terminal
*** Setting default shell to bash
    #+BEGIN_SRC emacs-lisp
 (defvar my-term-shell "/bin/bash")
 (defadvice ansi-term (before force-bash)
   (interactive (list my-term-shell)))
 (ad-activate 'ansi-term)
    #+END_SRC

** UI-elements
   #+BEGIN_SRC emacs-lisp
 (menu-bar-mode -1)
 (scroll-bar-mode -1)
 (tool-bar-mode -1)
 (display-battery-mode 1)
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
 (mouse-avoidance-mode 'banish)
 (setq display-time-day-and-date t)
 (setq display-time-24hr-format t)
 (display-time-mode 1)
   #+END_SRC

** Character encoding
   #+BEGIN_SRC emacs-lisp
  (prefer-coding-system 'utf-8)		
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (set-file-name-coding-system 'utf-8)
  (set-clipboard-coding-system 'utf-8)
  (set-buffer-file-coding-system 'utf-8) 
   #+END_SRC
 
* Org Mode
** Org
*** basic config
    #+BEGIN_SRC emacs-lisp
   (setq org-src-window-setup 'current-window)
    #+END_SRC
*** visual line mode
    #+BEGIN_SRC emacs-lisp
   (add-hook 'org-mode-hook (lambda () (visual-line-mode)))
    #+END_SRC
*** Org bullets
    #+BEGIN_SRC emacs-lisp
   (use-package org-bullets
     :ensure t
     :config
     (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))

    #+END_SRC
* Programs
** Dired
    #+BEGIN_SRC emacs-lisp
;;  (setq dired-listing-switches "-alh")
    #+END_SRC
** Dictionary
   #+BEGIN_SRC emacs-lisp
 (use-package dictionary
     :ensure t
 )
   #+END_SRC
** w3m
   #+BEGIN_SRC emacs-lisp
   (use-package w3m
   :ensure t
   ) 
(require 'w3m-load)
 (setq w3m-use-tab 'nil)
 (setq w3m-use-tab-line 'nil)
 (setq w3m-use-tab-menubar 'nil)
 (setq w3m-use-header-line 'nil)
 (setq browse-url-browser-function 'w3m-browse-url)
 (setq w3m-search-default-engine "duckduckgo")
 (autoload 'w3m-browse-url "w3m" "Ask a WWW browser to show a URL." t)
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
 ;; w3m keybindings
  (let ((map (make-keymap)))
    (suppress-keymap map)
    (define-key map "p" '(lambda ()
       (interactive) (emms-play-url w3m-current-url))) 
    (define-key map "P" '(lambda ()
       (interactive) (emms-play-url w3m-this-url))) 

    (define-key map "\t" 'w3m-next-anchor)
    (define-key map "f" 'w3m-next-anchor)
    (define-key map [(shift tab)] 'w3m-previous-anchor)
    (define-key map "b" 'w3m-previous-anchor)
    (define-key map [(shift iso-left-tab)] 'w3m-previous-anchor)
    (define-key map [return] 'w3m-view-this-url)
    (define-key map [(control return)] 'w3m-view-this-url-new-session)
    (define-key map "a" 'w3m-bookmark-add-current-url)
    (define-key map "A" 'w3m-bookmark-add-this-url)
    (define-key map "c" 'w3m-print-this-url)
    (define-key map "D" 'w3m-download)
    (define-key map "d" 'w3m-download-this-url)
    (define-key map "g" 'w3m-goto-url)
    (define-key map "G" 'w3m-goto-url-new-session)
    (define-key map "L" 'w3m-view-next-page)
    (define-key map "l" 'w3m-view-previous-page)
    (define-key map "r" 'w3m-reload-this-page)
    (define-key map "s" 'w3m-search)
    (define-key map "S" (lambda ()
			   (interactive)
			   (let ((current-prefix-arg t))
			     (call-interactively 'w3m-search))))
    (define-key map "u" 'w3m-view-parent-page)
    (define-key map "v" 'w3m-bookmark-view)
    (define-key map " " 'scroll-down)
    (setq dka-w3m-map map))
  (add-hook 'w3m-mode-hook '(lambda () (use-local-map dka-w3m-map)))
   #+END_SRC
** Elpher
   #+BEGIN_SRC emacs-lisp
   (use-package elpher
     :ensure t
     )
   #+END_SRC 

   #+BEGIN_SRC emacs-lisp
 ;; Elpher keybindings
 (add-hook 'elpher-mode-hook
	   (lambda ()
	     (local-set-key (kbd "r") 'elpher-reload)
	     (local-set-key (kbd "Ã¸") 'elpher-up)
	     (local-set-key (kbd "l") 'elpher-back)
	     (local-set-key (kbd "d") 'elpher-download)
	     (local-set-key (kbd "c") 'elpher-copy-link-url)
	     (local-set-key (kbd "g") 'elpher-go)
	     (local-set-key (kbd "f") 'elpher-next-link)
	     (local-set-key (kbd "b") 'elpher-prev-link)
	     (local-set-key (kbd "a") 'elpher-bookmark-current)))
   #+END_SRC

** Emms
   #+BEGIN_SRC emacs-lisp

   (use-package emms
   :ensure t
   ) 

 ;; emms settings
 (require 'emms-stream-info)
 (require 'emms-player-simple)
 (require 'emms-source-file)
 (require 'emms-source-playlist)
 (require 'emms-player-mpv)
 (setq emms-player-list '(emms-player-mpg321
			  emms-player-ogg123
			  emms-player-mpv))
   #+END_SRC

** Nov
   #+BEGIN_SRC emacs-lisp
 (use-package nov
     :ensure t
 )
   #+END_SRC

* Extentions
** Dashboard
   #+BEGIN_SRC emacs-lisp
   (use-package dashboard
     :ensure t
     :config
     (dashboard-setup-startup-hook)
     (setq dashboard-banner-logo-title "HAPPY HACKING!")
     (setq dashboard-items '((agenda . 10)
			     (recents . 10))))
     (setq dashboard-startup-banner 1)
;;"~/.emacs.d/art.txt")
   #+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
  )
#+END_SRC
* Editing
** Rainbow
   #+BEGIN_SRC emacs-lisp
   (use-package rainbow-mode
     :ensure t
     :init (add-hook 'prog-mode-hook 'rainbow-mode )
     )
   #+END_SRC 

   #+BEGIN_SRC emacs-lisp
   (use-package rainbow-delimiters
     :ensure t
     :init
     (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
   #+END_SRC

** gsmex
   #+BEGIN_SRC emacs-lisp
   (use-package smex
     :ensure t
     :init (smex-initialize)
     :bind
     ("M-x" . smex))
   #+END_SRC
** IDO
*** enable ido mode
    #+BEGIN_SRC emacs-lisp
   (setq ido-enable-flex-matching nil)
   (setq ido-create-new-buffer 'always)
   (setq ido-everywhere t)
   (ido-mode 1)
    #+END_SRC
*** ido-vertical
    #+BEGIN_SRC emacs-lisp
   (use-package ido-vertical-mode
     :ensure t
     :init
     (ido-vertical-mode 1))
   (setq ido-vertical-define-keys 'C-n-and-C-p-only)
    #+END_SRC
*** switch buffer
    #+BEGIN_SRC emacs-lisp
 (global-set-key (kbd "C-x b") 'ido-switch-buffer)
    #+END_SRC
** Symon
   #+BEGIN_SRC emacs-lisp
   (use-package symon
     :ensure t
     :bind
     ("C-c s" . symon-mode))
   #+END_SRC
** Jump to character
   #+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
   #+END_SRC
** Kill Ring
   #+BEGIN_SRC emacs-lisp
   (use-package popup-kill-ring
     :ensure t
     :bind ("M-y" . popup-kill-ring))
   #+END_SRC

** Auto Completion
   #+BEGIN_SRC emacs-lisp
   (use-package company
     :ensure t
     :init
     )
   (add-hook 'after-init-hook 'global-company-mode)
   #+END_SRC
** Search buffer
   #+BEGIN_SRC emacs-lisp
   (use-package swiper
     :ensure t
     :bind ("C-s" . swiper))
   #+END_SRC
